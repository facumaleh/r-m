{"ast":null,"code":"var _jsxFileName = \"/Users/facundo/Desktop/prog3/rick/src/Components/nav/Search.js\",\n    _s = $RefreshSig$();\n\nimport Character from \"../Cards/Card\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Container(props) {\n  _s();\n\n  const [characters, setCharacters] = useState([]);\n  const [searchValue] = useState(\"\");\n  useEffect(() => {\n    getAPI().then(resp => {\n      setCharacters(resp.results);\n    });\n  }, []);\n\n  const getAPI = async () => {\n    const url = \"https://rickandmortyapi.com/api/character/\";\n    return await fetch(url).then(result => result.json());\n  };\n\n  const filteredChars = characters.filter(char => {\n    return char.name.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      value: searchValue,\n      onChange: value => setSearchValue(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), filteredChars.map(character => {\n      return /*#__PURE__*/_jsxDEV(Character, {\n        img: character.image,\n        name: character.name,\n        origin: character.origin.name\n      }, character.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Container, \"fbqndc8O0vc725i+hoMO0dt6CRw=\");\n\n_c = Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/Users/facundo/Desktop/prog3/rick/src/Components/nav/Search.js"],"names":["Character","React","useEffect","useState","Container","props","characters","setCharacters","searchValue","getAPI","then","resp","results","url","fetch","result","json","filteredChars","filter","char","name","toLowerCase","indexOf","value","setSearchValue","map","character","image","origin","id"],"mappings":";;;AACA,OAAOA,SAAP,MAAsB,eAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAIA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAEzC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AACE,QAAM,CAACK,WAAD,IAAgBL,QAAQ,CAAC,EAAD,CAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,MAAM,GAAGC,IAAT,CAAeC,IAAD,IAAU;AACtBJ,MAAAA,aAAa,CAACI,IAAI,CAACC,OAAN,CAAb;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMH,MAAM,GAAG,YAAY;AACzB,UAAMI,GAAG,GAAG,4CAAZ;AACA,WAAO,MAAMC,KAAK,CAACD,GAAD,CAAL,CAAWH,IAAX,CAAiBK,MAAD,IAAYA,MAAM,CAACC,IAAP,EAA5B,CAAb;AACD,GAHD;;AAIA,QAAMC,aAAa,GAAGX,UAAU,CAACY,MAAX,CAAmBC,IAAD,IAAU;AAChD,WAAOA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,OAAxB,CAAgCd,WAAW,CAACa,WAAZ,EAAhC,MAA+D,CAAC,CAAvE;AACD,GAFqB,CAAtB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEb,WAAf;AAA4B,MAAA,QAAQ,EAAGe,KAAD,IAAWC,cAAc,CAACD,KAAD;AAA/D;AAAA;AAAA;AAAA;AAAA,YADF,EAEGN,aAAa,CAACQ,GAAd,CAAmBC,SAAD,IAAe;AAChC,0BACE,QAAC,SAAD;AAEE,QAAA,GAAG,EAAEA,SAAS,CAACC,KAFjB;AAGE,QAAA,IAAI,EAAED,SAAS,CAACN,IAHlB;AAIE,QAAA,MAAM,EAAEM,SAAS,CAACE,MAAV,CAAiBR;AAJ3B,SACOM,SAAS,CAACG,EADjB;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KATA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAlCuBzB,S;;KAAAA,S","sourcesContent":["\nimport Character from \"../Cards/Card\";\nimport React, { useEffect, useState } from \"react\";\n\n\n\nexport default function Container(props) {\n    \nconst [characters, setCharacters] = useState([]);\n  const [searchValue] = useState(\"\");\n\n  useEffect(() => {\n    getAPI().then((resp) => {\n      setCharacters(resp.results);\n    });\n  }, []);\n\n  const getAPI = async () => {\n    const url = \"https://rickandmortyapi.com/api/character/\";\n    return await fetch(url).then((result) => result.json());\n  };\n  const filteredChars = characters.filter((char) => {\n    return char.name.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\n  });\n \n  return (\n    <div className=\"App\">\n      <Navbar value={searchValue} onChange={(value) => setSearchValue(value)} />\n      {filteredChars.map((character) => {\n        return (\n          <Character\n            key={character.id}\n            img={character.image}\n            name={character.name}\n            origin={character.origin.name}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}